#ifndef P
#define P 10000
#endif

#ifndef ITER
#define ITER 250
#endif

struct Vector3 {
    double x;
    double y;
    double z;
};

struct Body {
    struct Vector3 pos;
    struct Vector3 vel;
    double mass;
};

inline
struct Vector3 *(double a, struct Vector3 b)
{
    return Vector3 { _mul_SxS_(a, b.x), _mul_SxS_(a, b.y), _mul_SxS_(a, b.z) };
}

inline
struct Vector3[P] *(double a, struct Vector3[P] b)
{
    return { iv -> a * b[iv] | iv < [P] };
}

inline
struct Vector3 +(struct Vector3 a, struct Vector3 b)
{
    return Vector3 { _add_SxS_(a.x, b.x), _add_SxS_(a.y, b.y), _add_SxS_(a.z, b.z) };
}

inline
struct Vector3[P] +(struct Vector3[P] a, struct Vector3[P] b)
{
    return { iv -> a[iv] + b[iv] | iv < [P] };
}

inline
struct Vector3 -(struct Vector3 a, struct Vector3 b)
{
    return Vector3 { _sub_SxS_(a.x, b.x), _sub_SxS_(a.y, b.y), _sub_SxS_(a.z, b.z) };
}

inline
double l2norm(struct Vector3 a)
{
    x = _mul_SxS_(a.x, a.x);
    y = _mul_SxS_(a.y, a.y);
    z = _mul_SxS_(a.z, a.z);
    return /*_sqrt_S_*/(_add_SxS_(_add_SxS_(x, y), z));
}

inline
double pow3(double x)
{
    return _mul_SxS_(_mul_SxS_(x, x), x);
}

inline
struct Vector3 acc(struct Body b1, struct Body b2)
{
    dir = b2.pos - b1.pos;
    factor = _eq_SxS_(pow3(l2norm(dir)), 0.0)
        ? 0.0
        : _div_SxS_(b2.mass, pow3(l2norm(dir)));
    return factor * dir;
}

inline
struct Vector3[P] acc_v(struct Body[P] bodies)
{
    return { [i] -> with {
                        ([0] <= [j] < [P]) : acc(bodies[[i]], bodies[[j]]);
                    }: fold(+, Vector3 { 0.0, 0.0, 0.0 })
           | [i] < [P] };
}

inline
struct Body body(int i)
{
    d = _tod_S_(i);
    return Body {
        Vector3 { d, d, d },
        Vector3 { d, d, d },
        d
    };
}

noinline
struct Body[P] timestep(struct Body[P] bodies, double dt)
{
    acceleration = acc_v(bodies);
    bodies.pos += dt * bodies.vel;
    bodies.vel += dt * acceleration;
    return bodies;
}

int main()
{
    bodies = { [i] -> body(i) | [i] < [P] };

    i = 0;
    while (_lt_SxS_(i, _hideValue_SxA_(0, ITER))) {
        bodies = timestep(bodies, 0.01);
        i = _add_SxS_(i, 1);
    }

    return _toi_S_(_add_SxS_(bodies[[0]].pos.x, bodies[[0]].vel.y));
}
